# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

# TODO здесь ваш код...
from mastermind_engine import pick_number, check_number, check_input
from termcolor import cprint, colored

print_pick = pick_number()

for i in range(4):
    print_pick[i] = str(print_pick[i])

# print('Загаданное число', ''.join(print_pick))
counter = 1

cprint('Загадано 4-значное число, все цифры которого различны . Попробуйте отгадать его', color='green')

while True:

    input_number = str(input(colored('Введите свое число\n', color='blue')))

    control = check_input(num=input_number)

    if control != 1:

        check_result = check_number(num=input_number, hidden_num=print_pick)
        print('быки -', check_result['bulls'], ', коровы -', check_result['cows'])

        if check_result['bulls'] == 4:
            cprint('Вы победили! Число угадано полностью.', color='magenta', attrs=['bold'])
            print('Вы угадали за', counter, 'ходов \n'
                                            '')
            answer = input(colored('Хотите еще партию? 1 - Да, 2 - Нет\n', color='red'))
            if int(answer) == 2:
                cprint('Игра окончена. Спасибо за игру!', color='cyan')
                break
            else:
                print_pick = pick_number()
                for i in range(4):
                    print_pick[i] = str(print_pick[i])

                # print('Загаданное число', ''.join(print_pick))
                counter = 0

    counter += 1
